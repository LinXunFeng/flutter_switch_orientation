// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum LXFDeviceOrientation: Int {
  /// If the device shows its boot logo in portrait, then the boot logo is shown
  /// in [portraitUp]. Otherwise, the device shows its boot logo in landscape
  /// and this orientation is obtained by rotating the device 90 degrees
  /// clockwise from its boot orientation.
  case portraitUp = 0
  /// The orientation that is 90 degrees clockwise from [portraitUp].
  ///
  /// If the device shows its boot logo in landscape, then the boot logo is
  /// shown in [landscapeLeft].
  case landscapeLeft = 1
  /// The orientation that is 180 degrees from [portraitUp].
  case portraitDown = 2
  /// The orientation that is 90 degrees counterclockwise from [portraitUp].
  case landscapeRight = 3
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LXFSwitchOrientationHostApi {
  func setPreferredOrientations(orientation0: LXFDeviceOrientation?, orientation1: LXFDeviceOrientation?, orientation2: LXFDeviceOrientation?, orientation3: LXFDeviceOrientation?) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LXFSwitchOrientationHostApiSetup {
  /// The codec used by LXFSwitchOrientationHostApi.
  /// Sets up an instance of `LXFSwitchOrientationHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LXFSwitchOrientationHostApi?) {
    let setPreferredOrientationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.switch_orientation.LXFSwitchOrientationHostApi.setPreferredOrientations", binaryMessenger: binaryMessenger)
    if let api = api {
      setPreferredOrientationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let orientation0Arg: LXFDeviceOrientation? = isNullish(args[0]) ? nil : LXFDeviceOrientation(rawValue: args[0] as! Int)!
        let orientation1Arg: LXFDeviceOrientation? = isNullish(args[1]) ? nil : LXFDeviceOrientation(rawValue: args[1] as! Int)!
        let orientation2Arg: LXFDeviceOrientation? = isNullish(args[2]) ? nil : LXFDeviceOrientation(rawValue: args[2] as! Int)!
        let orientation3Arg: LXFDeviceOrientation? = isNullish(args[3]) ? nil : LXFDeviceOrientation(rawValue: args[3] as! Int)!
        do {
          try api.setPreferredOrientations(orientation0: orientation0Arg, orientation1: orientation1Arg, orientation2: orientation2Arg, orientation3: orientation3Arg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setPreferredOrientationsChannel.setMessageHandler(nil)
    }
  }
}
